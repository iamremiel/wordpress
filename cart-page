<?php
/**
 * Cart Page
 *
 * This template can be overridden by copying it to yourtheme/woocommerce/cart/cart.php.
 *
 * HOWEVER, on occasion WooCommerce will need to update template files and you
 * (the theme developer) will need to copy the new files to your theme to
 * maintain compatibility. We try to do this as little as possible, but it does
 * happen. When this occurs the version of the template file will be bumped and
 * the readme will list any important changes.
 *
 * @see     https://woo.com/document/template-structure/
 * @package WooCommerce\Templates
 * @version 7.9.0
 */

defined( 'ABSPATH' ) || exit;

 ?>

<div class="display-flex-wrap">
<div class="left-part">
<?php do_action( 'woocommerce_before_cart' );  ?>

<form class="woocommerce-cart-form" action="<?php echo esc_url( wc_get_cart_url() ); ?>" method="post">
    <?php do_action( 'woocommerce_before_cart_table' ); ?>

    <table class="shop_table shop_table_responsive cart woocommerce-cart-form__contents" cellspacing="0">
        <thead>
            <tr>
               
                <th class="product-thumbnail"><span class="screen-reader-text"><?php esc_html_e( 'Thumbnail image', 'woocommerce' ); ?></span></th>
                <th class="product-name"><?php esc_html_e( 'Product', 'woocommerce' ); ?></th>
                <th class="product-price"><?php esc_html_e( 'Price', 'woocommerce' ); ?></th>
                <th class="product-quantity"><?php esc_html_e( 'Quantity', 'woocommerce' ); ?></th>
                 <th class="product-remove"><span class="screen-reader-text"><?php esc_html_e( 'Remove item', 'woocommerce' ); ?></span></th>
            </tr>
        </thead>
        <tbody>
            <?php do_action( 'woocommerce_before_cart_contents' ); ?>
            <?php 
                               function get_product_posts_hp(){
                            // Get the start and end dates for the last 6 months
                            $start_of_last_6_months = date('Y-m-d', strtotime('-3 months'));
                            $end_of_last_6_months = date('Y-m-d');

                            $query = new WP_Query( array(
                                'posts_per_page' => 12,
                                'post_type' => 'product',
                                'post_status' => 'publish',
                                'ignore_sticky_posts' => 1,
                                'meta_key' => 'total_sales',
                                'orderby' => 'meta_value_num',
                                'order' => 'DESC',
                                'date_query' => array(
                                    'after' => $start_of_last_6_months,
                                    'before' => $end_of_last_6_months,
                                    'inclusive' => true,
                                ),
                            ) );

                          //  echo '<p>Count: '. $query->post_count ; '</p>';

                            if($query->have_posts()) :
                                $best_seller_product_id = array();
                                while($query->have_posts()) : $query->the_post();

                                    $product_id = get_the_ID();
                                    $product_title = get_the_title();
                                    $total_sales = get_post_meta($product_id, 'total_sales', true);
                                    $product_permalink = get_permalink($product_id);

                                    $best_seller_product_id[]=$product_id;

                                /*   echo '<p>Product ID: ' . $product_id . ', Product Title: <a href="' . $product_permalink . '">' . $product_title . '</a>, Total Sales: ' . $total_sales . '</p>';*/

                                endwhile;
                                wp_reset_postdata();
                            endif;

                            return $best_seller_product_id;
                        }

                        function get_cart_product_ids() {
                        // Initialize an empty array to store product IDs
                        $product_ids = array();

                        // Get the cart contents
                        $cart = WC()->cart->get_cart();

                         // Loop over $cart items
                        foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {
                           $product = $cart_item['data'];
                           $product_id = $cart_item['product_id'];
                   
                           $product_ids[]= $product_id;
                        }

                        // Return the array of product IDs
                        return $product_ids;
                    }

                    function show_random_message() {

                        $baseValue = 77;

                        // Calculate the number of increments that should have occurred since the start
                        $startTime = strtotime("today");
                        $currentTime = time();
                        $elapsedTime = $currentTime - $startTime;
                        $increments = floor($elapsedTime / 120); // 120 seconds = 2 minutes

                        // Calculate the final value
                        $baseValue += $increments;

                        // Reset the base value if it exceeds 200
                        if ($baseValue >= 200) {
                            $baseValue = $baseValue % 200; // Reset to 0 if it exceeds 200
                        }
                        // Define an array of messages
                        $messages = array(
                            "Almost sold out - This item is selling fast!",
                            "4.3 This item is Top Rated",
                            $baseValue." shoppers purchased this item today."
                        );

                        // Select a random index from the array
                        $random_index = array_rand($messages);

                        // Display the message corresponding to the random index
                        return $messages[$random_index];
                    }

                    function check_same_values($array) {
                        // Get the first value from the array
                        $first_value = reset($array);

                        // Loop through all values in the array
                        foreach ($array as $value) {
                            // If any value is different from the first value, return false
                            if ($value !== $first_value) {
                                return false;
                            }
                        }

                        // If all values are the same, return true
                        return true;
                    }



            ?>
           
            <?php
            $results_array = array(); 
            $tr_classes = array();

                                // print_r($results_array);

     

            ?>


            <?php
            $incrementor = 1;
            foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {
                $_product   = apply_filters( 'woocommerce_cart_item_product', $cart_item['data'], $cart_item, $cart_item_key );
                $product_id = apply_filters( 'woocommerce_cart_item_product_id', $cart_item['product_id'], $cart_item, $cart_item_key );
                /**
                 * Filter the product name.
                 *
                 * @since 2.1.0
                 * @param string $product_name Name of the product in the cart.
                 * @param array $cart_item The product in the cart.
                 * @param string $cart_item_key Key for the product in the cart.
                 */
                $product_name = apply_filters( 'woocommerce_cart_item_name', $_product->get_name(), $cart_item, $cart_item_key );

                if ( $_product && $_product->exists() && $cart_item['quantity'] > 0 && apply_filters( 'woocommerce_cart_item_visible', true, $cart_item, $cart_item_key ) ) {
                    $product_permalink = apply_filters( 'woocommerce_cart_item_permalink', $_product->is_visible() ? $_product->get_permalink( $cart_item ) : '', $cart_item, $cart_item_key );
                    ?>
      <?php 
                        $results = get_product_purchase_count_for_today($product_id);
                        
            
                        $results_array[] = $results;
                     
                        $tr_classes[] = $incrementor;


                        $number_of_purchasers = "";
                                  // Base value
            /*            // Base value
                        $baseValue = 77;

                        // Calculate the number of increments that should have occurred since the start
                        $startTime = strtotime("today");
                        $currentTime = time();
                        $elapsedTime = $currentTime - $startTime;
                        $increments = floor($elapsedTime / 120); // 120 seconds = 2 minutes*/
                        $add_class = '';

                        // Calculate the final value
        /*                $baseValue += $increments;

                        // Reset the base value if it exceeds 200
                        if ($baseValue >= 200) {
                            $baseValue = $baseValue % 200; // Reset to 0 if it exceeds 200
                        }
*/
                   
                        $add_class="got_orders".$incrementor;
                        $another_class = '';
                        
                    
                        if ($results > 0){
                            $another_class = 'number-of-related-purchase-today';
                        $incrementor++;
                        // $number_of_purchasers = show_random_message();
                            $number_of_purchasers = '<tr style="background:#444;color:#fff;"class="number-of-related-purchase-today '.$add_class.'"><td colspan="5">'.show_random_message().'</td></tr>';
                        }
          
                 


                    // print_r(get_cart_product_ids());
                    // print_r(get_product_posts_hp());

                        ?>
                        <?php// echo $number_of_purchasers; ?>
                    <tr class="<?php echo $another_class; ?> woocommerce-cart-form__cart-item <?php echo esc_attr( apply_filters( 'woocommerce_cart_item_class', 'cart_item', $cart_item, $cart_item_key ) ); ?>">


                        <td class="product-thumbnail">
                        <?php
                        $thumbnail = apply_filters( 'woocommerce_cart_item_thumbnail', $_product->get_image(), $cart_item, $cart_item_key );

                        if ( ! $product_permalink ) {
                            echo $thumbnail; // PHPCS: XSS ok.
                        } else {
                            printf( '<a href="%s">%s</a>', esc_url( $product_permalink ), $thumbnail ); // PHPCS: XSS ok.
                        }
                        ?>
                        </td>

                        <td class="product-name" data-title="<?php esc_attr_e( 'Product', 'woocommerce' ); ?>">
                        <?php
            
                            echo wp_kses_post( $product_name . '&nbsp;' );
                     

                        do_action( 'woocommerce_after_cart_item_name', $cart_item, $cart_item_key );

                        // Meta data.
                        echo wc_get_formatted_cart_item_data( $cart_item ); // PHPCS: XSS ok.

                        // Backorder notification.
                        if ( $_product->backorders_require_notification() && $_product->is_on_backorder( $cart_item['quantity'] ) ) {
                            echo wp_kses_post( apply_filters( 'woocommerce_cart_item_backorder_notification', '<p class="backorder_notification">' . esc_html__( 'Available on backorder', 'woocommerce' ) . '</p>', $product_id ) );
                        }
                        ?>
                        </td>

                        <td class="product-price" data-title="<?php esc_attr_e( 'Price', 'woocommerce' ); ?>">
                            <?php
                
                                echo WC()->cart->get_product_price( $_product ); // PHPCS: XSS ok.

                     
                            ?>
                        </td>

                        <td class="product-quantity" data-title="<?php esc_attr_e( 'Quantity', 'woocommerce' ); ?>">
                        <?php
                        if ( $_product->is_sold_individually() ) {
                            $min_quantity = 1;
                            $max_quantity = 1;
                        } else {
                            $min_quantity = 0;
                            $max_quantity = $_product->get_max_purchase_quantity();
                        }

                        $product_quantity = woocommerce_quantity_input(
                            array(
                                'input_name'   => "cart[{$cart_item_key}][qty]",
                                'input_value'  => $cart_item['quantity'],
                                'max_value'    => $max_quantity,
                                'min_value'    => $min_quantity,
                                'product_name' => $product_name,
                            ),
                            $_product,
                            false
                        );

                        echo apply_filters( 'woocommerce_cart_item_quantity', $product_quantity, $cart_item_key, $cart_item ); // PHPCS: XSS ok.
                        ?>
                        </td>
   
    <td class="product-remove">
                            <?php
                                echo apply_filters( // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
                                    'woocommerce_cart_item_remove_link',
                                    sprintf(
                                        '<a href="%s" class="remove" aria-label="%s" data-product_id="%s" data-product_sku="%s">&times;</a>',
                                        esc_url( wc_get_cart_remove_url( $cart_item_key ) ),
                                        /* translators: %s is the product name */
                                        esc_attr( sprintf( __( 'Remove %s from cart', 'woocommerce' ), wp_strip_all_tags( $product_name ) ) ),
                                        esc_attr( $product_id ),
                                        esc_attr( $_product->get_sku() )
                                    ),
                                    $cart_item_key
                                );
                            ?>
                        </td>
                    </tr>
                    <?php

                }
           
            }

//we randomly show 1 of the messages once every 3 minutes
              $messages = $tr_classes;

/*$current_datetime = current_time('Y-m-d H:i:s'); // Retrieves the current date and time in 'Year-Month-Day Hour:Minute:Second' format
echo "Current WordPress date and time: " . $current_datetime;

              // print_r($tr_classes);
print_r($results_array);
*/
                // Select a random index from the array
                $random_index = array_rand($messages);

               // echo $messages[$random_index];?>
                <style type="text/css">
                    .got_orders<?php echo $messages[$random_index]; ?>{
                       display: table-row!important;
                    }
                </style>


            <?php do_action( 'woocommerce_cart_contents' ); ?>

            <tr>
                <td colspan="6" class="actions">

                <?php if ( wc_coupons_enabled() ) { ?>
                        <div class="coupon">
                            <label for="coupon_code" class="screen-reader-text"><?php esc_html_e( 'Coupon:', 'woocommerce' ); ?></label> <input type="text" name="coupon_code" class="input-text" id="coupon_code" value="" placeholder="<?php esc_attr_e( 'Coupon code', 'woocommerce' ); ?>" /> <button type="submit" class="button<?php echo esc_attr( wc_wp_theme_get_element_class_name( 'button' ) ? ' ' . wc_wp_theme_get_element_class_name( 'button' ) : '' ); ?>" name="apply_coupon" value="<?php esc_attr_e( 'Apply', 'woocommerce' ); ?>"><?php esc_html_e( 'Apply', 'woocommerce' ); ?></button>
                            <?php do_action( 'woocommerce_cart_coupon' ); ?>
                        </div>
                    <?php } ?>

                    <button type="submit" class="button<?php echo esc_attr( wc_wp_theme_get_element_class_name( 'button' ) ? ' ' . wc_wp_theme_get_element_class_name( 'button' ) : '' ); ?>" name="update_cart" value="<?php esc_attr_e( 'Update cart', 'woocommerce' ); ?>"><?php esc_html_e( 'Update cart', 'woocommerce' ); ?></button>

                    <?php do_action( 'woocommerce_cart_actions' ); ?>

                    <?php wp_nonce_field( 'woocommerce-cart', 'woocommerce-cart-nonce' ); ?>
                </td>
            </tr>

            <?php do_action( 'woocommerce_after_cart_contents' ); ?>
        </tbody>
    </table>
    <?php do_action( 'woocommerce_after_cart_table' ); ?>
</form>

<div class="best-sellers">
<h2>BEST SELLERS</h2>
<div class="swiper-container">

<?php 

//get the best seller selected on cart page backend
echo do_shortcode('[products limit="3" columns="3" ids="'.implode(',', get_field('feature_under_best_seller')).'" ]'); 
?>

</div>
</div>
</div>

<div class="right-part">
<?php do_action( 'woocommerce_before_cart_collaterals' ); ?>

<div class="cart-collaterals">
    <?php
        /**
         * Cart collaterals hook.
         *
         * @hooked woocommerce_cross_sell_display
         * @hooked woocommerce_cart_totals - 10
         */
        do_action( 'woocommerce_cart_collaterals' );
    ?>
</div>

<div style="margin-bottom:30px;"class="coupon-area">
    <h3>Promos</h3>
                <?php if ( wc_coupons_enabled() ) { ?>
                    <!-- <form class="woocommerce-cart-form" action="<?php// echo esc_url( wc_get_cart_url() ); ?>" method="post"> -->
                        <div class="coupon coupon-right">
                            <label for="coupon_code" class="screen-reader-text"><?php esc_html_e( 'Coupon:', 'woocommerce' ); ?></label> <input type="text" name="coupon_code" class="input-text" id="coupon_code" value="" placeholder="<?php esc_attr_e( 'Enter Promo Code', 'woocommerce' ); ?>" /> <button type="submit" class="button<?php echo esc_attr( wc_wp_theme_get_element_class_name( 'button coupon-submit' ) ? ' ' . wc_wp_theme_get_element_class_name( 'button coupon-submit' ) : '' ); ?>" name="apply_coupon" value="<?php esc_attr_e( 'Apply', 'woocommerce' ); ?>"><?php esc_html_e( 'Apply', 'woocommerce' ); ?></button>
                            <?php do_action( 'woocommerce_cart_coupon' ); ?>
                        </div>
                    <!-- </form> -->
                    <?php } ?>
</div>

<div class="points-reward">
    <h3>My Points and Rewards</h3>
    <div style="display: flex;"class="">
       
        <div class="rating-icon">
            <img src="<?php echo get_site_url();?>/wp-content/uploads/2024/03/poinst-and-rewards-icon.webp" />
        </div>
        <div>
            <?php  if(is_user_logged_in() ):?>
                <p>Use <strong id="points-reward-logged"></strong> Exhale Rewards Points for a <?php //echo get_woocommerce_currency_symbol();?><strong id="points-reward-price"></strong> discount on this order!</p>
                <button type="submit" class="button<?php echo esc_attr( wc_wp_theme_get_element_class_name( 'button coupon-submit' ) ? ' ' . wc_wp_theme_get_element_class_name( 'button coupon-submit' ) : '' ); ?>" name="apply_coupon" value="<?php esc_attr_e( 'Apply', 'woocommerce' ); ?>"><?php esc_html_e( 'Apply', 'woocommerce' ); ?></button>

            <?php else: ?>
      <p><a href="<?php echo get_site_url();?>my-account/?wcm_redirect_to=page&wcm_redirect_id=12">Login</a> and earn <strong id="points-reward"></strong> Consumable Exhale Reward Points when you complete your order.</p>
             <?php endif;?>
        </div>
    </div>
</div>
</div>
</div>



<?php do_action( 'woocommerce_after_cart' ); ?>
